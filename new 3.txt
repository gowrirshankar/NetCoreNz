T. Rowe Price – WelcomeKitsandIDCardKits 
•	Get InProgress Recipients from recipient repository by passing runId as parameter.
•	Get inputProduct from recipient.Filename by splitting the filename with ‘_’
•	Get allowedProduct Cass or Ncoa product HNW|Brokerage|ILDB, split by ‘|’
•	If allowedProduct contains the inputProduct
o	Fetch the step details from transactionworkflowsteprepository by passing runid and name should be ‘NCOA’
o	Fetch InProgressRecipients by passing runId as parameter.
o	Get CassAddress from cassRepository by passing runId as parameter.
o	Get InProgressCassAddress by joining InProgressRecipients and CassAddress.
o	GetValidCassAddress(TrimmedAddress) by passing the InProgressCassAddress as parameter where the InProgressCassAddress.ErrCodeInt value should be less than 100.
o	If TrimmedAddress doesn’t exist, then pass the step details as parameter and complete the transactionworkflowstep by setting the step.state as “Complete” and save the transactionworkflowstep repository.

PerformNCOA
•	Pass trimmed address, runId and EAScallbackurl as parameter
•	AddressList<Address> contains ClientJobId and Addresses and assign value as below.
o	ClientJobId  runId,
o	Addresses  TrimmedAddress by mapping with List<Address>
•	Finally map the <ServiceResponse> of easService.PerformNcoa with above Address and callbackurl.

•	Add workflow key to transactionworkflowstep keys as below.
	Key  NcoaId
	Value  ServiceResponse.RequestId and save the transactionWorkflowStepRepository.

	TD Ameritrade – S P and SF Files
•	Get InProgress Recipients from recipient repository by passing runId as parameter.
•	Fetch the step details from transactionworkflowsteprepository by passing runid and name should be ‘NCOA’
•	Loop through parallel foreach for recipients . 
o	Fetch the recipientXML from the recipient.
o	Fetch the fileType from rexipientXML (“Extension”) with element (“FileType”) value
o	If FileType value is “StoreFront”
	Get OrderType from recipientXML(“ProcessingData”).Element(“ORD_TYP”).Value
	If OrderType exists check for below orderType value and assign addRec boolean value.
OrderType  EMAIL_TDA or INSTAPRINT_BULK or INSTAPRINT_DTC then assign addRec value as false.
If addRec value is true then add the recipient to the local reipient list(reqRecipients).

•	Get the InProgressRecipients from reqRecipients.
•	Get cass address from cass repository by passing runId as parameter.
•	Get InProgressCassAddress by joining InProgressRecipients and CassAddress.
•	GetValidCassAddress(TrimmedAddress) by passing the InProgressCassAddress as parameter where the InProgressCassAddress.ErrCodeInt value should be less than 100.
•	If TrimmedAddress doesn’t exist, then pass the step details as parameter and complete the transactionworkflowstep by setting the step.state as “Complete” and save the transactionworkflowstep repository.
              PerformNCOA
•	Pass trimmed address, runId and EAScallbackurl as parameter
•	AddressList<Address> contains ClientJobId and Addresses and assign value as below.
o	ClientJobId  runId,
o	Addresses  TrimmedAddress by mapping with List<Address>
•	Finally map the <ServiceResponse> of easService.PerformNcoa with above Address and callbackurl. 	

•	Add workflow key to transactionworkflowstep keys as below.
	Key  NcoaId
	Value  ServiceResponse.RequestId and save the transactionWorkflowStepRepository.

Victory Capital Management – USAA Mutual Funds
•	Get InProgress Recipients from recipient repository by passing runId as parameter.
•	Fetch the step details from transactionworkflowsteprepository by passing runid and name should be ‘NCOA’
•	Loop through parallel foreach for recipients . 
o	Fetch the recipientXML from the recipient.
o	Fetch the cassValue from rexipientXML XPathElement(“.//cass”) value
o	If cassValue is true then add the recipient to the local recipient list(reqRecipients)

•	Get the InProgressRecipients from reqRecipients.
•	Get cass address from cass repository by passing runId as parameter.
•	Get InProgressCassAddress by joining InProgressRecipients and CassAddress.
•	GetValidCassAddress(TrimmedAddress) by passing the InProgressCassAddress as parameter where the InProgressCassAddress.ErrCodeInt value should be less than 100.
•	If TrimmedAddress doesn’t exist, then pass the step details as parameter and complete the transactionworkflowstep by setting the step.state as “Complete” and save the transactionworkflowstep repository.
              PerformNCOA
•	Pass trimmed address, runId and EAScallbackurl as parameter
•	AddressList<Address> contains ClientJobId and Addresses and assign value as below.
o	ClientJobId  runId,
o	Addresses  TrimmedAddress by mapping with List<Address>
•	Finally map the <ServiceResponse> of easService.PerformNcoa with above Address and callbackurl. 	

•	Add workflow key to transactionworkflowstep keys as below.
	Key  NcoaId
	Value  ServiceResponse.RequestId and save the transactionWorkflowStepRepository.

ChangeHealthCare – WelcomeKitsandIDCardKits
•	Get InProgress Recipients from recipient repository by passing runId as parameter.
•	Set AllowedNcoa Flag values as Y,R,Z,X
•	Loop through the InProgressRecipients
o	Fetch the recipientXML from the recipient
o	If recipientXML Element(“Extension”).Elements(“Member_Data”) has any value then
	Check if any allowedNcoaFlags equals recipientXML Element(“Extension”).Elements(“Member_Data”).Element(“M_NCOA”) then add the recipient to the local recipient list(reqRecipients)
o	Else 
if any allowedNcoaFlags equals recipientXML Element(“Extension”).Elements(“Dependent_Data”).Element(“Dependent_Data1”) .Element (“M_NCOA”) then add the recipient to the local recipient list(reqRecipients)

•	Fetch the step details from transactionworkflowsteprepository by passing runid and name should be ‘NCOA’
•	Get the InProgressRecipients from reqRecipients.
•	Get cass address from cass repository by passing runId as parameter.
•	Get InProgressCassAddress by joining InProgressRecipients and CassAddress.
•	GetValidCassAddress(TrimmedAddress) by passing the InProgressCassAddress as parameter where the InProgressCassAddress.ErrCodeInt value should be less than 100.
•	If TrimmedAddress doesn’t exist, then pass the step details as parameter and complete the transactionworkflowstep by setting the step.state as “Complete” and save the transactionworkflowstep repository.
              PerformNCOA
•	Pass trimmed address, runId and EAScallbackurl as parameter
•	AddressList<Address> contains ClientJobId and Addresses and assign value as below.
o	ClientJobId  runId,
o	Addresses  TrimmedAddress by mapping with List<Address>
•	Finally map the <ServiceResponse> of easService.PerformNcoa with above Address and callbackurl. 	

•	Add workflow key to transactionworkflowstep keys as below.
	Key  NcoaId
	Value  ServiceResponse.RequestId and save the transactionWorkflowStepRepository.



						
=========

ViewActivity.cshtml
-------------------

 <div style="padding-bottom:8px;">
                                            <button style="float: left;" type="button"
                                                    ng-disabled="disableSubmitSelectbtn"
                                                    ng-click="processQueueModal()"
                                                    class="btn btn-sm btn-primary">
                                                Submit Selected
                                            </button>
                                            <div ng-show="disableSubmitSelectbtn">
                                                <p style="color:red; padding: 5px 0px 0px 120px;"><strong>Services have been stopped by {{userName}} at {{CurrentDateTime}} </strong></p>
                                            </div>
                                        </div>
										
RunDetailcontroller.js
----------------------

$scope.disableReSubmitbtn = false;

    function GetServiecStatus() {
        method: 'GET',
            $http({
                url: urlHelper.getUrl("ObService/GetServiceStatus"),
            }).then(function (response) {
                $scope.serviceStatus = response.data.Flag ? "True" : "False";
                if ($scope.serviceStatus == "False") {
                    $scope.disableReSubmitbtn = true;
                }
                $scope.userName = $scope.getUserNameDetails(response.data.UserName);
                $scope.CurrentDateTime = ConvertUTCtoLocalTimeService.ConvertUTCtoLocalTime(response.data.LastModifiedDate);
            }).catch(function (data, status, headers, config) {
            });
    }

    $scope.getUserNameDetails = function (userName) {
        $http({
            method: 'GET',
            url: urlHelper.getUrl("Tracking/GetUserNameDetails"),
            params: { userName: userName }
        }).then(function (response) {
            $scope.userName = response.data.CurrentUserName;
        }).catch(function (data, status, headers, config) {
        });
    };

    GetServiecStatus();
	
	
	===========================================
	
	CreateRunsController.js
	-------------------------
	
	GetServiecStatus();
	
	$scope.disableCreateRunbtn = false;

    function GetServiecStatus() {
        method: 'GET',
            $http({
                url: urlHelper.getUrl("ObService/GetServiceStatus"),
            }).then(function (response) {
                $scope.serviceStatus = response.data.Flag ? "True" : "False";
                if ($scope.serviceStatus == "False") {
                    $scope.disableCreateRunbtn = true;
                }
                $scope.userName = $scope.getUserNameDetails(response.data.UserName);
                $scope.CurrentDateTime = $scope.ConvertUTCtoLocalTime(response.data.LastModifiedDate);
            }).catch(function (data, status, headers, config) {
            });
    }

    $scope.ConvertUTCtoLocalTime = function (utcDate) {
            if (utcDate != null) {
                var date = moment.utc(utcDate);
                date.local();
                return date.format("MM/DD/YYYY hh:mm:ss A");
            }
            else
                return "";
        };

    $scope.getUserNameDetails = function (userName) {
        $http({
            method: 'GET',
            url: urlHelper.getUrl("Tracking/GetUserNameDetails"),
            params: { userName: userName }
        }).then(function (response) {
            $scope.userName = response.data.CurrentUserName;
        }).catch(function (data, status, headers, config) {
        });
    };
	
	
	Rundetail.cshtml
	-----------------
	<div class="col-lg-10" style="padding-right:0px;">
                                                        <span class="text-info" ng-hide="hideInvalidateSpin" style="color:red;">Cleanup in progress. Please wait till the invalidate process to complete before resubmitting or recreating this Run</span>                                                        
                                                            <button type="button" ng-disabled="disableInvalidatebtn" ng-show="model.detail.AllowInvalidate" ng-click="openInvalidateModal('sm');" class="btn btn-danger" style="float:right;"> {{ btnInvalidateText }} <i ng-hide="hideInvalidateSpin" class="glyphicon glyphicon-refresh glyphicon-spin"></i></button>
                                                            <button type="button" ng-disabled="disableReSubmitbtn" ng-show="model.detail.AllowResubmit  && model.detail.FeedId > 0" ng-click="resubmitRun(model.detail.FeedId, model.detail.RunId);" title="Resubmit a run from original feed" class="btn btn-success" style="float:right;">Resubmit Run</button>
                                                            <div ng-show="(disableReSubmitbtn && model.detail.AllowResubmit  && model.detail.FeedId > 0) || (disableReSubmitbtn && model.detail.AllowNewRun  && model.detail.RunId > 0) ">
                                                                <p style="color:red; float:right; padding:9px"><strong>Services have been stopped by {{userName}} at {{CurrentDateTime}} </strong></p>
                                                            </div>
                                                            <button type="button" ng-disabled="disableReSubmitbtn" ng-show="model.detail.AllowNewRun  && model.detail.RunId > 0" ng-click="createNewRun(model.detail.RunId, model.detail.RunType);" title="Resubmit a run using the current run's recipient list" class="btn btn-success" style="float:right;">Resubmit Run</button>                                                        
                                                    </div>
													
													
		CreateRuns.cshtml
		-----------------
		<div class="row pad20TopBottom">
                    <div class="col-md-2"></div>
                    <div class="col-md-3">
                        <button ng-show="!creatingRun"
                                type="button"
                                class="btn btn-sm btn-primary mright10"
                                id="btnSubmit"
                                data-toggle="modal"
                                data-backdrop="static"
                                data-keyboard="false"
                                data-target="#confirmCreateRunsModal"
                                data-dismiss="modal"
                                ng-disabled="disableCreateRunbtn">
                            Create Run
                        </button>
                        <button ng-show="creatingRun" class="btn btn-sm btn-primary mright10" disabled>
                            Create Run
                            <span class="loader"></span>
                        </button>
                        <div ng-show="disableCreateRunbtn">
                            <p style="color:red; width: 600px;"><strong>Services have been stopped by {{userName}} at {{CurrentDateTime}} </strong></p>
                        </div>
                    </div>
                    
                </div>
				

==================